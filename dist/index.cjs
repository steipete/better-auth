'use strict';

const auth = require('./shared/better-auth.RIhT_gCf.cjs');
const index = require('./shared/better-auth.ANpbi45u.cjs');
const misc = require('./shared/better-auth.BLDOwz3i.cjs');
const socialProviders_index = require('./shared/better-auth.Dg3Pwtlb.cjs');
const id = require('./shared/better-auth.Bg6iw3ig.cjs');
const logger = require('./shared/better-auth.B3274wGK.cjs');
require('./api/index.cjs');
require('better-call');
require('./shared/better-auth.Bco357J8.cjs');
require('./shared/better-auth.C1hdVENX.cjs');
require('./shared/better-auth.l2-e84v_.cjs');
require('./shared/better-auth.B6fIklBU.cjs');
require('@better-auth/utils/base64');
require('@better-auth/utils/hmac');
require('./shared/better-auth.vPQBmXQL.cjs');
require('./shared/better-auth.DRmln2Nr.cjs');
require('@better-auth/utils/binary');
require('zod/v4');
require('./shared/better-auth.BIMq4RPW.cjs');
require('./shared/better-auth.Cxlqz5AU.cjs');
require('defu');
require('./crypto/index.cjs');
require('@better-auth/utils/hash');
require('@noble/ciphers/chacha');
require('@noble/ciphers/utils');
require('@noble/ciphers/webcrypto');
require('jose');
require('@noble/hashes/scrypt');
require('@better-auth/utils');
require('@better-auth/utils/hex');
require('@noble/hashes/utils');
require('./shared/better-auth.CYeOI8C-.cjs');
require('@better-auth/utils/random');
require('./shared/better-auth.BtEGXjCf.cjs');
require('./shared/better-auth.Bt_3DcBl.cjs');
require('./shared/better-auth.zsL9dsaY.cjs');
require('kysely');
require('./shared/better-auth.ZhaALnFz.cjs');
require('./shared/better-auth.CwxQpTGf.cjs');
require('./shared/better-auth.CDXNofOe.cjs');
require('@better-fetch/fetch');
require('jose/errors');



exports.betterAuth = auth.betterAuth;
exports.createTelemetry = auth.createTelemetry;
exports.getTelemetryAuthConfig = auth.getTelemetryAuthConfig;
exports.BetterAuthError = index.BetterAuthError;
exports.MissingDependencyError = index.MissingDependencyError;
exports.capitalizeFirstLetter = misc.capitalizeFirstLetter;
exports.HIDE_METADATA = socialProviders_index.HIDE_METADATA;
exports.generateState = socialProviders_index.generateState;
exports.parseState = socialProviders_index.parseState;
exports.generateId = id.generateId;
exports.createLogger = logger.createLogger;
exports.levels = logger.levels;
exports.logger = logger.logger;
exports.shouldPublishLog = logger.shouldPublishLog;
